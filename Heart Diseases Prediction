import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt
heart_disease = pd.read_csv('/content/heart.csv')
heart_disease.head()
heart_disease.shape
heart_disease.describe()
heart_disease.info()
heart_disease.isnull().sum()
heart_disease.value_counts('target')
x= heart_disease.drop(columns='target', axis=1)
y= heart_disease['target']

print(x)
print(y)
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, stratify = y, random_state = 2)

print(x.shape, x_train.shape, x_test.shape)
model = LogisticRegression()
model.fit(x_train, y_train)
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)
print(training_data_accuracy)
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)
print(test_data_accuracy)
input_data = (63,1,0,130,254,0,0,147,0,1.4,1,1,3)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

print(prediction)

if (prediction[0] == 0):
  print('person does not have heart disease')
else:
  print('Person has heart disease')
